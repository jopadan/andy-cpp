{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Andy C++",
  "fileTypes": [
    "ndc"
  ],
  "patterns": [
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "expression": {
      "patterns": [
        {
          "include": "#dictionary"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#call"
        },
        {
          "include": "#list"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "comment": "function definition",
          "name": "meta.function.definition.andy-cpp",
          "begin": "\\b((pure)\\s)?(fn)\\s+([A-Za-z_][A-Za-z_0-9]*)",
          "beginCaptures": {
            "2": {
              "name": "keyword.other.pure.andy-cpp"
            },
            "3": {
              "name": "keyword.other.fn.andy-cpp"
            },
            "4": {
              "name": "entity.name.function.andy-cpp"
            }
          },
          "end": "(\\{)|(=>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.brackets.round.andy-cpp"
            },
            "2": {
              "name": "keyword.operator.arrow.fat.andy-cpp"
            }
          }
        },
        {
          "comment": "anonymous function definition",
          "name": "meta.function.definition.anonymous.andy-cpp",
          "begin": "\\b((pure)\\s)?(fn)",
          "beginCaptures": {
            "2": {
              "name": "keyword.other.pure.andy-cpp"
            },
            "3": {
              "name": "keyword.other.fn.andy-cpp"
            }
          },
          "end": "(\\{)|(=>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.brackets.round.andy-cpp"
            },
            "2": {
              "name": "keyword.operator.arrow.fat.andy-cpp"
            }
          }
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "begin": "(//)",
          "end": "$",
          "name": "comment.line.double-slash.andy-cpp"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "comment": "Floats",
          "match": "\\b([0-9][0-9_]*\\.[0-9][0-9_]*)\\b",
          "name": "constant.numeric.float.andy-cpp"
        },
        {
          "comment": "Hexadecimal numbers",
          "match": "\\b(0x[0-9A-Fa-f][0-9A-Fa-f_]*)\\b",
          "name": "constant.numeric.hex.andy-cpp"
        },
        {
          "comment": "Ocatal n umbers",
          "match": "\\b(0o[0-7][0-7]*)\\b",
          "name": "constant.numeric.octal.andy-cpp"
        },
        {
          "comment": "Arbitrary radix numbers (parsed as if a-z is always valid)",
          "match": "\\b(0r[0-9A-Za-z][0-9A-Za-z_]*)\\b",
          "name": "constant.numeric.andy-cpp"
        },
        {
          "comment": "Binary numbers",
          "match": "\\b(0b[01][01_]*)\\b",
          "name": "constant.numeric.binary.andy-cpp"
        },
        {
          "comment": "Integer numbers",
          "match": "\\b([0-9][0-9_]*)\\b",
          "name": "constant.numeric.decimal.andy-cpp"
        },
        {
          "comment": "booleans",
          "name": "constant.language.bool.andy-cpp",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "comment": "double-quoted string",
          "name": "string.quoted.double.andy-cpp",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#escapes"
            }
          ]
        },
        {
          "comment": "double-quoted raw strings",
          "name": "string.quoted.double.andy-cpp",
          "begin": "r(#*)(\")",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.raw.andy-cpp"
            },
            "2": {
              "name": "punctuation.definition.string.andy-cpp"
            }
          },
          "end": "(\")(\\1)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.andy-cpp"
            },
            "2": {
              "name": "punctuation.definition.string.raw.andy-cpp"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "control flow keywords",
          "name": "keyword.control.andy-cpp",
          "match": "\\b(break|if|else|while|for|return)\\b"
        },
        {
          "comment": "storage keywords",
          "name": "keyword.other.andy-cpp storage.type.andy-cpp",
          "match": "\\b(let)\\b"
        },
        {
          "comment": "fn",
          "name": "keyword.other.fn.andy-cpp",
          "match": "\\bfn\\b"
        },
        {
          "comment": "other keywords",
          "name": "keyword.other.andy-cpp",
          "match": "\\b(in)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "comment": "logical operators",
          "name": "keyword.operator.logical.andy-cpp",
          "match": "\\b(not|or|and)\\b"
        },
        {
          "comment": "range operators",
          "name": "keyword.operator.range.andy-cpp",
          "match": "(\\.\\.=?)"
        },
        {
          "comment": "augmented assignment operators",
          "name": "keyword.operator.assignment.andy-cpp",
          "match": "((\\+|-|\\*|/|\\\\|\\^|&|\\||<<|>>|~|<>|\\+\\+)=)"
        },
        {
          "comment": "function augmented assignment opreators",
          "name": "keyword.operator.assignment.andy-cpp",
          "match": "(([a-zA-Z]+)=)"
        },
        {
          "comment": "single equal",
          "name": "keyword.operator.assignment.equal.andy-cpp",
          "match": "(?<![<>])=(?!=|>)"
        },
        {
          "comment": "comparison operators",
          "name": "keyword.operator.comparison.andy-cpp",
          "match": "(>=<|<=>|=(=)?(?!>)|!=|<=|(?<!=)>=)"
        },
        {
          "comment": "math operators",
          "name": "keyword.operator.arithmetic.andy-cpp",
          "match": "(\\+|\\-|\\*|/(?!\\/)|\\\\|\\^|\\%%?|>>|<<|&(?!&)|\\|(?!\\|)|~)"
        },
        {
          "name": "punctuation.semicolon.andy-cpp",
          "match": ";"
        }
      ]
    },
    "list": {
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.list.begin.andy-cpp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.list.end.andy-cpp"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "dictionary": {
      "begin": "%{",
      "end": "}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.andy-cpp"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.andy-cpp"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "call": {
      "patterns": [
        {
          "comment": "Field accessor style call",
          "name": "meta.function.call.andy-cpp",
          "match": "(?<!\\.)(\\.)([A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.operator.access.dot.andy-cpp"
            },
            "2": {
              "name": "entity.name.function.andy-cpp"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "comment": "Function call",
          "name": "meta.function.call.andy-cpp",
          "begin": "([A-Za-z_][A-Za-z0-9_\\?]*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.andy-cpp"
            },
            "2": {
              "name": "punctuation.bracket.round.andy-cpp"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.round.andy-cpp"
            }
          }
        }
      ]
    },
    "escapes": {
      "comment": "escapes: ASCII, byte, Unicode, quote, regex",
      "name": "constant.character.escape.andy-cpp",
      "match": "(\\\\)(.)",
      "captures": {
        "1": {
          "name": "constant.character.escape.backslash.andy-cpp"
        },
        "2": {
          "name": "constant.character.escape.andy-cpp"
        }
      }
    }
  },
  "scopeName": "source.andy-cpp"
}