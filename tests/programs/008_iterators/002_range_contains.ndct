--PROGRAM--
// Test cases for range checks

// Basic range tests
assert_eq(5 in (1..10), true);   // 5 is within the range 1 to 10
assert_eq(9 in (1..10), true);  // 10 is at the upper bound
assert_eq(1 in (1..10), true);   // 1 is at the lower bound
assert_eq(0 in (1..10), false);  // 0 is outside the range
assert_eq(10 in (1..10), false); // 11 is outside the range

// Inclusive range tests
assert_eq(10 in (1..=10), true);  // 10 is included in the inclusive range
assert_eq(11 in (1..=10), false); // 11 is outside the inclusive range

// Open-ended ranges
assert_eq(5 in (5..), true);    // 5 is the lower bound of an open-ended range
assert_eq(100 in (5..), true);  // 100 is within the open-ended range
assert_eq(4 in (5..), false);   // 4 is below the lower bound of the range

// Negative ranges
assert_eq(-5 in (-10..-1), true);   // -5 is within the negative range
assert_eq(-10 in (-10..-1), true);  // -10 is at the lower bound
assert_eq(-2 in (-10..-1), true);   // -1 is at the upper bound
assert_eq(-1 in (-10..=-1), true);   // -1 is at the upper bound
assert_eq(-1 in (-10..-1), false);   // 0 is outside the negative range
assert_eq(0 in (-10..=-1), false);   // 0 is outside the negative range

// Invalid types
assert_eq("string" in (1..10), false);     // Non-integer type
assert_eq(3.14 in (1..10), false);         // Float type
assert_eq(true in (1..10), false);         // Boolean type
assert_eq(() in (1..10), false);         // Null type
assert_eq([1, 2, 3] in (1..10), false);    // Array type

// Boundary cases
assert_eq(1 in (1..=1), true);  // Single-value inclusive range
assert_eq(1 in (1..1), false);  // Single-value exclusive range
assert_eq(-1 in (-1..-1), false); // Exclusive single-value negative range
assert_eq(0 in (-1..1), true);  // 0 is within the range -1 to 1
assert_eq(1 in (-1..1), false); // 1 is outside the exclusive range

// Edge case: infinite ranges
assert_eq(-9223372036854775808 in (5..), false); // Out of open range's bounds
print("ok");
--EXPECT--
ok
