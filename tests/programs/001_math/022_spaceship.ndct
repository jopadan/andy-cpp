--PROGRAM--
// Testing <=> and >=< operators

// Integers (inside and outside i64 range)
assert_eq(5 <=> 6, -1);
assert_eq(6 <=> 5, 1);
assert_eq(5 <=> 5, 0);
assert_eq(9223372036854775807 <=> 9223372036854775806, 1); // i64 max
assert_eq(-9223372036854775808 <=> -9223372036854775807, -1); // i64 min
assert_eq(9223372036854775808 <=> -9223372036854775808, 1); // Outside i64
assert_eq(-9223372036854775809 <=> 9223372036854775807, -1);

// Strings (single and multiple characters)
assert_eq("a" <=> "b", -1);
assert_eq("b" <=> "a", 1);
assert_eq("a" <=> "a", 0);
assert_eq("apple" <=> "banana", -1);
assert_eq("banana" <=> "apple", 1);
assert_eq("apple" <=> "apple", 0);

// Floats
assert_eq(5.0 <=> 6.0, -1);
assert_eq(6.0 <=> 5.0, 1);
assert_eq(5.0 <=> 5.0, 0);
assert_eq(-0.0 <=> 0.0, 0); // Negative zero is equal becuase total ordering
assert_eq(0.0 <=> 0.0, 0);
assert_eq((0.0 / 0.0) <=> (0.0 / 0.0), 0); // NaN comparison, assuming NaN == NaN in your language

// Rational Numbers
assert_eq((5 / 3) <=> (7 / 4), -1); // 5/3 < 7/4
assert_eq((7 / 4) <=> (5 / 3), 1); // 7/4 > 5/3
assert_eq((5 / 3) <=> (5 / 3), 0); // Equal rational numbers

// Complex Numbers
assert_eq((1 + 2i) <=> (2 + 3i), -1); // Compare based on magnitude, or however complex comparison is defined
assert_eq((2 + 3i) <=> (1 + 2i), 1);
assert_eq((1 + 2i) <=> (1 + 2i), 0);

// Booleans
assert_eq(true <=> false, 1);
assert_eq(false <=> true, -1);
assert_eq(true <=> true, 0);
assert_eq(false <=> false, 0);

// Lists (lexicographical comparison)
assert_eq([1, 2, 3] <=> [1, 2, 4], -1);
assert_eq([1, 2, 4] <=> [1, 2, 3], 1);
assert_eq([1, 2, 3] <=> [1, 2, 3], 0);
assert_eq([] <=> [1], -1);
assert_eq([1] <=> [], 1);

// Tuples (behave like lists)
assert_eq((1, 2, 3) <=> (1, 2, 4), -1);
assert_eq((1, 2, 4) <=> (1, 2, 3), 1);
assert_eq((1, 2, 3) <=> (1, 2, 3), 0);
assert_eq(() <=> (1,), -1);
assert_eq((1,) <=> (), 1);

// Cross-type comparisons that are invalid
// assert_eq_error(5 <=> true); // Number vs boolean
// assert_eq_error([1] <=> (1,)); // List vs tuple
// assert_eq_error("a" <=> 1); // String vs number

// Testing the inverse operator >=<
// All the above tests inverted
assert_eq(5 >=< 6, 1);
assert_eq(6 >=< 5, -1);
assert_eq(5 >=< 5, 0);
assert_eq("a" >=< "b", 1);
assert_eq("b" >=< "a", -1);
assert_eq("a" >=< "a", 0);
assert_eq([1, 2, 3] >=< [1, 2, 4], 1);
assert_eq((1, 2, 3) >=< (1, 2, 4), 1);
assert_eq((5 / 3) >=< (7 / 4), 1);
assert_eq((1 + 2i) >=< (2 + 3i), 1);
assert_eq(true >=< false, -1);
assert_eq(false >=< true, 1);
print("ok");
--EXPECT--
ok
